""" Unit tests."""
from lexer import Lexer
import unittest

TEST_INPUT = open('test.py.txt').read()

class LexerTest(unittest.TestCase):
    """ Basic tokenization teser. """

    def test_tokens(self):
        """ Tokens tester. """
        lexer = Lexer()
        lexer.input(TEST_INPUT)

        self.assertEquals(str(lexer.token()), '(KEYWORD def)')
        self.assertEquals(str(lexer.token()), '(ID "fact")')
        self.assertEquals(str(lexer.token()), '(PUNCT "(")')
        self.assertEquals(str(lexer.token()), '(ID "x")')
        self.assertEquals(str(lexer.token()), '(PUNCT ")")')
        self.assertEquals(str(lexer.token()), '(PUNCT ":")')
        self.assertEquals(str(lexer.token()), '(NEWLINE)')
        self.assertEquals(str(lexer.token()), '(INDENT)')
        self.assertEquals(str(lexer.token()), '(KEYWORD if)')
        self.assertEquals(str(lexer.token()), '(ID "x")')
        self.assertEquals(str(lexer.token()), '(PUNCT "==")')
        self.assertEquals(str(lexer.token()), '(PUNCT "-")')
        self.assertEquals(str(lexer.token()), '(LIT 1)')
        self.assertEquals(str(lexer.token()), '(PUNCT ":")')
        self.assertEquals(str(lexer.token()), '(NEWLINE)')
        self.assertEquals(str(lexer.token()), '(INDENT)')
        self.assertEquals(str(lexer.token()), '(KEYWORD return)')
        self.assertEquals(str(lexer.token()), '(LIT 1.j)')
        self.assertEquals(str(lexer.token()), '(NEWLINE)')
        self.assertEquals(str(lexer.token()), '(DEDENT)')
        self.assertEquals(str(lexer.token()), '(KEYWORD elif)')
        self.assertEquals(str(lexer.token()), '(ID "x")')
        self.assertEquals(str(lexer.token()), '(PUNCT "==")')
        self.assertEquals(str(lexer.token()), '(LIT 0)')
        self.assertEquals(str(lexer.token()), '(PUNCT ":")')
        self.assertEquals(str(lexer.token()), '(NEWLINE)')
        self.assertEquals(str(lexer.token()), '(INDENT)')
        self.assertEquals(str(lexer.token()), '(KEYWORD return)')
        self.assertEquals(str(lexer.token()), '(LIT 1)')
        self.assertEquals(str(lexer.token()), '(NEWLINE)')
        self.assertEquals(str(lexer.token()), '(DEDENT)')
        self.assertEquals(str(lexer.token()), '(KEYWORD else)')
        self.assertEquals(str(lexer.token()), '(PUNCT ":")')
        self.assertEquals(str(lexer.token()), '(NEWLINE)')
        self.assertEquals(str(lexer.token()), '(INDENT)')
        self.assertEquals(str(lexer.token()), '(KEYWORD return)')
        self.assertEquals(str(lexer.token()), '(ID "x")')
        self.assertEquals(str(lexer.token()), '(PUNCT "*")')
        self.assertEquals(str(lexer.token()), '(ID "fact")')
        self.assertEquals(str(lexer.token()), '(PUNCT "(")')
        self.assertEquals(str(lexer.token()), '(ID "x")')
        self.assertEquals(str(lexer.token()), '(PUNCT "-")')
        self.assertEquals(str(lexer.token()), '(LIT 1)')
        self.assertEquals(str(lexer.token()), '(PUNCT ")")')
        self.assertEquals(str(lexer.token()), '(NEWLINE)')
        self.assertEquals(str(lexer.token()), '(DEDENT)')
        self.assertEquals(str(lexer.token()), '(DEDENT)')
        self.assertEquals(str(lexer.token()), '(ID "s")')
        self.assertEquals(str(lexer.token()), '(PUNCT "=")')
        self.assertEquals(str(lexer.token()), '(LIT "foo\\ \n\'\"")')
        self.assertEquals(str(lexer.token()), '(NEWLINE)')
        self.assertEquals(str(lexer.token()), '(ID "fact")')
        self.assertEquals(str(lexer.token()), '(PUNCT "(")')
        self.assertEquals(str(lexer.token()), '(LIT 20)')
        self.assertEquals(str(lexer.token()), '(PUNCT ")")')
        self.assertEquals(str(lexer.token()), '(ENDMARKER)')

if __name__ == '__main__':
    unittest.main()
